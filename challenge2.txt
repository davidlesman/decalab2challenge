    // Set initial values
    EXT #0x33
    MOV R0, #51  // Load R0 with 0x3333
    EXT #0xFF
    MOV R1, #17  // Load R1 with 0xFF11

    // Assume R0 and R1 contain the 16-bit values to multiply
    // Result will be stored in R3:R2 (R3 = upper 16 bits, R2 = lower 16 bits)
    
    // Isolate lower bytes of R0 and R1
    MOV R4, R0
    MOV R5, R1

    // Multiply lower bytes
    //MULT R4, R5
    MOV R2, R4    // Store lower byte result in R2
    
    // Isolate upper bytes of R0 and R1
    LSR R6, R0, #8  // R6 = R0 >> 8 (upper byte of R0)
    LSR R7, R1, #8  // R7 = R1 >> 8 (upper byte of R1)

    // Multiply upper bytes
    MOV R4, R6
    MOV R5, R7
    //MULT R4, R5
    MOV R3, R4    // Store upper * upper result in R3 temporarily
    
    // Multiply lower byte of R0 with upper byte of R1
    MOV R4, R0
    MOV R5, R7     // R5 = upper byte of R1
    //MULT R4, R5
    MOV R7, R4     // Store lower * upper result in R6
    
    // Multiply upper byte of R0 with lower byte of R1
    MOV R4, R1
    MOV R5, R6     // R5 = upper byte of R0
    //MULT R4, R5
    ADD R7, R4     // Accumulate both cross products into R7
    MOV R6, R7

    // Shift and accumulate into R2 (upper part of lower result)
    LSL R7, R7, #8     // Shift cross-products left by 8 bits
    ADD R2, R7     // Add shifted cross-product into lower result
    
    // Store correct upper result
    LSR R6, R6, #8     // Shift cross-product sum right by 8 bits
    ADD R3, R6     // Add shifted cross-product into R3
    
    // Final result is in R3:R2